name: Deploy MooseMatrix (Dev)

on:
  push:
    branches: ["dev"]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
      ts: ${{ steps.build.outputs.ts }}
    steps:
      - uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push image
        id: build
        run: |
          TS=$(date +%Y%m%d-%H%M%S)
          IMAGE=ghcr.io/the-moose-man/moosematrix:$TS
          LATEST=ghcr.io/the-moose-man/moosematrix:dev-latest

          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "ts=$TS" >> $GITHUB_OUTPUT

          docker build -t $IMAGE -t $LATEST .
          docker push $IMAGE
          docker push $LATEST

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_PORT: ${{ secrets.VPS_PORT }}
      VPS_SSH_KEY_B64: ${{ secrets.VPS_SSH_KEY_B64 }}
      IMAGE: ${{ needs.build-and-push.outputs.image }}
      TS: ${{ needs.build-and-push.outputs.ts }}
    steps:
      - name: Install private key
        run: |
          mkdir -p ~/.ssh
          echo "$VPS_SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/id_ed25519 \
              -o StrictHostKeyChecking=no \
              -p "$VPS_PORT" \
              "$VPS_USER@$VPS_HOST" 'bash -s' << 'EOF'
            set -e

            IMAGE="${IMAGE}"
            BASE_NAME="moosematrix-app-dev"

            echo "üì• Pulling latest image..."
            docker pull $IMAGE

            echo "‚ôªÔ∏è Removing old container (if exists)..."
            docker rm -f $BASE_NAME || true

            echo "üöÄ Starting new container: $BASE_NAME"
            docker run -d \
              --name $BASE_NAME \
              --network moose-dev-net \
              --restart unless-stopped \
              $IMAGE

            echo "ü©∫ INTERNAL health check..."
            for i in {1..30}; do
              STATUS=$(docker inspect --format='{{.State.Health.Status}}' "$BASE_NAME" 2>/dev/null || true)
              if [ "$STATUS" = "healthy" ]; then
                echo "‚úÖ INTERNAL check success: $BASE_NAME is healthy"
                break
              elif [ "$STATUS" = "unhealthy" ]; then
                echo "‚ùå INTERNAL check FAILED"
                docker logs "$BASE_NAME"
                docker rm -f "$BASE_NAME"
                exit 1
              fi
              echo "‚è≥ Waiting... status=${STATUS:-starting} ($i/30)"
              sleep 5
            done

            echo "üßπ Keeping only last 5 images..."
            docker images "ghcr.io/the-moose-man/moosematrix" --format "{{.Repository}}:{{.Tag}}" \
              | grep -v latest | sort -r \
              | tail -n +6 | xargs -r docker rmi

            echo "üîÑ Reloading nginx..."
            docker exec moose-nginx nginx -s reload

            echo "‚úÖ Dev deployment complete ‚Üí https://moosematrix-dev.moosematrix.com"
          EOF

      - name: External health check
        run: |
          echo "üåç Checking external endpoint..."
          for i in {1..10}; do
            if curl -fsSL https://moosematrix-dev.moosematrix.com/healthz; then
              echo "‚úÖ External check succeeded"
              exit 0
            fi
            echo "‚è≥ Retrying external check ($i/10)..."
            sleep 5
          done
          echo "‚ùå External check failed"
          exit 1
